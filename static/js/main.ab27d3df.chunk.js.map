{"version":3,"sources":["components/PageContent/PageContent.tsx","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["PageContent","total","perPage","useState","firstDisplayedItem","setFirstDisplayedItem","lastDisplayedItem","setLastDisplayedItem","currentPage","useParams","useMemo","firstItem","slice","className","Pagination","first","last","current","withInfo","selectPage","moveBack","moveForth","precurrent","setPrecurrent","postcurrent","setPostcurrent","isFirstVisible","setIsFirstVisible","isLastVisible","setIsLastVisible","isPrecurrentVisible","setIsPrecurrentVisible","isPostcurrentVisible","setIsPostcurrentVisible","isPrecurrentFreeSpaceVisible","setIsPrecurrentFreeSpaceVisible","isPostcurrentFreeSpaceVisible","setIsPostcurrentFreeSpaceVisible","setCurrentNeighboursValues","setVisibleFirstAndCurrentNeighboursValues","setNewParameters","useEffect","to","onClick","style","pointerEvents","hidden","App","page","setPerPage","setCurrentPage","setWithInfo","navigate","useNavigate","defaultValue","onChange","event","target","value","name","type","checked","Math","ceil","selectedPage","state","index","element","path","ReactDOM","render","document","getElementById"],"mappings":"gQAgDeA,EAvCiC,SAAC,GAG1C,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,QAEA,EAGIC,mBAAS,GAHb,mBACEC,EADF,KAEEC,EAFF,KAKA,EAGIF,mBAASD,GAHb,mBACEI,EADF,KAEEC,EAFF,KAKQC,EAAgBC,cAAhBD,YAgBR,OAdAE,mBAAQ,WACN,GAAIF,EAAa,CACf,IAAMG,IAAcH,EAAYI,MAAM,GAAK,GAAKV,EAAU,EAE1DG,EAAsBM,GAGpBJ,EADEN,EAAQU,EAAYT,EAAU,EACXD,EAEAU,EAAYT,EAAU,MAG9C,CAACM,IAGF,mCACE,mBAAGK,UAAU,kBAAb,wBACWT,EADX,mBACwCE,QCkO/BQ,G,MA5PsB,SAAC,GAU/B,IATLC,EASI,EATJA,MACAC,EAQI,EARJA,KACAC,EAOI,EAPJA,QACAf,EAMI,EANJA,QACAD,EAKI,EALJA,MACAiB,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,SACAC,EACI,EADJA,UAEA,EAAoClB,mBAASc,EAAU,GAAvD,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAsCpB,mBAASc,EAAU,GAAzD,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA4CtB,oBAAS,GAArD,mBAAOuB,EAAP,KAAuBC,EAAvB,KACA,EAA0CxB,mBAASa,EAAO,GAA1D,mBAAOY,EAAP,KAAsBC,EAAtB,KACA,EAAsD1B,oBAAS,GAA/D,mBAAO2B,EAAP,KAA4BC,EAA5B,KACA,EAAwD5B,mBAASa,EAAO,GAAxE,mBAAOgB,EAAP,KAA6BC,EAA7B,KACA,EAGI9B,oBAAS,GAHb,mBACE+B,EADF,KAEEC,EAFF,KAIA,EAGIhC,mBAASa,EAAO,GAHpB,mBACEoB,EADF,KAEEC,EAFF,KAKMC,EAA6B,WACjCf,EAAcN,EAAU,GACxBQ,EAAeR,EAAU,IAGrBsB,EAA4C,WAChDD,IACAX,GAAkB,IAmEda,EAAmB,WACvB,OAAQvB,GACN,KAAKF,EAxDPuB,IACAX,GAAkB,GAClBE,EAAiBb,EAAO,GACxBe,GAAuB,GACvBI,GAAgC,GAChCF,EAAwBjB,EAAO,GAC/BqB,EAAiCrB,EAAO,GAoDpC,MACF,KAAKD,EAAQ,EAjDfwB,IACAV,EAAiBb,EAAO,GACxBe,GAAuB,GACvBI,GAAgC,GAChCF,EAAwBjB,EAAO,GAC/BqB,EAAiCrB,EAAO,GA8CpC,MACF,KAAKD,EAAQ,EA3CfwB,IACAV,EAAiBb,EAAO,GACxBe,GAAuB,GACvBI,GAAgC,GAChCF,EAAwBjB,EAAO,GAC/BqB,EAAiCrB,EAAO,GAwCpC,MACF,KAAKA,EArCPuB,IACAV,GAAiB,GACjBE,GAAuB,GACvBI,GAAgC,GAChCF,GAAwB,GACxBI,GAAiC,GAkC7B,MACF,KAAKrB,EAAO,EA/BduB,IACAV,GAAiB,GACjBE,GAAuB,GACvBI,EAAgCnB,EAAO,GACvCiB,GAAwB,GACxBI,GAAiC,GA4B7B,MACF,KAAKrB,EAAO,EAzBduB,IACAV,GAAiB,GACjBE,GAAuB,GACvBI,GAAgC,GAChCF,GAAwB,GACxBI,GAAiC,GAsB7B,MACF,QAnFFE,IACAV,GAAiB,GACjBE,GAAuB,GACvBI,GAAgC,GAChCF,GAAwB,GACxBI,GAAiC,KAuFnC,OAJAI,qBAAU,WACRD,MACC,CAACvB,EAASD,IAGX,sBAAKH,UAAU,iBAAf,UACE,cAAC,IAAD,CACEA,UAAU,iCACV6B,GAAE,gBAAWzB,EAAU,GACvB0B,QAASvB,EACTwB,MAAO,CACLC,cAAgB5B,IAAYF,EACxB,OAAS,QANjB,eAYA,sBACEF,UAAU,iBACViC,QAAS5B,EAFX,gCAKOD,EAAU,GAAKf,EAAU,EALhC,cAKwCe,EAAUf,EAAWD,EAASgB,EAAUf,EAAWD,EAL3F,eAKuGA,EALvG,gBASA,qBACEY,UAAU,aADZ,UAGE,oBACEA,UAAU,WACViC,QAASpB,EAFX,SAIE,cAAC,IAAD,CACEb,UAAU,WACV6B,GAAE,gBAAW3B,GACb4B,QAAS,WACPxB,EAAWJ,IAJf,SAOGA,MAGL,oBACEF,UAAU,YACViC,QAASZ,EAFX,iBAMA,oBACErB,UAAU,WACViC,QAAShB,EAFX,SAIE,cAAC,IAAD,CACEjB,UAAU,WACV6B,GAAE,gBAAWpB,GACbqB,QAAS,WACPxB,EAAWG,IAJf,SAOGA,MAGL,oBACET,UAAU,WADZ,SAGE,cAAC,IAAD,CACEA,UAAU,WACV6B,GAAE,gBAAWzB,GACb0B,QAAS,WACPxB,EAAWF,IAJf,oBAOOA,EAPP,SAUF,oBACEJ,UAAU,WACViC,QAASd,EAFX,SAIE,cAAC,IAAD,CACEnB,UAAU,WACV6B,GAAE,gBAAWlB,GACbmB,QAAS,WACPxB,EAAWK,IAJf,SAOGA,MAGL,oBACEX,UAAU,YACViC,QAASV,EAFX,iBAMA,oBACEvB,UAAU,WACViC,QAASlB,EAFX,SAIE,cAAC,IAAD,CACEf,UAAU,WACV6B,GAAE,gBAAW1B,GACb2B,QAAS,WACPxB,EAAWH,IAJf,SAOGA,SAIP,cAAC,IAAD,CACEH,UAAU,kCACV6B,GAAE,gBAAWzB,EAAU,GACvB0B,QAAStB,EACTuB,MAAO,CACLC,cAAgB5B,IAAYD,EACxB,OAAS,QANjB,oBCpHS+B,EAnIO,WACpB,MAAgB5C,mBAAS,IAAlBF,EAAP,oBACA,EAAeE,mBAAS,GAAjB6C,EAAP,oBACA,EAA8B7C,mBAAS,GAAvC,mBAAOD,EAAP,KAAgB+C,EAAhB,KACA,EAAsC9C,mBAAS,GAA/C,mBAAOK,EAAP,KAAoB0C,EAApB,KACA,EAAgC/C,oBAAS,GAAzC,mBAAOe,EAAP,KAAiBiC,EAAjB,KACMC,EAAWC,cA4BjB,OACE,qCACE,4CAIA,uBAAMxC,UAAU,gBAAhB,UACE,yBACEA,UAAU,gBACVyC,aAAc,EACdC,SAhBgB,SAACC,GACvBP,GAAYO,EAAMC,OAAOC,OACzBR,EAAeF,GACfI,EAAS,YAUL,UAKE,wBACEM,MAAM,IADR,gCAKA,wBACEA,MAAM,IADR,gCAKA,wBACEA,MAAM,KADR,iCAKA,wBACEA,MAAM,KADR,oCAOF,uDAEA,wCAEE,uBACEC,KAAK,WACLC,KAAK,QACLF,MAAM,MACNH,SAAU,kBAAMJ,GAAY,SAGhC,uCAEE,uBACEQ,KAAK,WACLC,KAAK,QACLF,MAAM,KACNH,SAAU,kBAAMJ,GAAY,IAC5BU,SAAU3C,UAKhB,sBACEL,UAAU,aADZ,UAGE,cAAC,EAAD,CACEE,MAAOiC,EACPhC,KAAM8C,KAAKC,KAAK9D,EAAQC,GACxBe,QAAST,EACTN,QAASA,EACTD,MAAOA,EACPiB,SAAUA,EACVC,WA7Fa,SAAC6C,GACpBd,EAAec,IA6FT5C,SA1FsB,WACXZ,EAEFwC,GACbE,GAAe,SAAAe,GAAK,OAAIA,EAAQ,MAuF5B5C,UAnFuB,WACZb,EAEFP,GACbiD,GAAe,SAAAe,GAAK,OAAIA,EAAQ,QAkF9B,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,OAAK,EACLC,QACE,cAAC,EAAD,CACElE,MAAOA,EACPC,QAASA,MAIf,cAAC,IAAD,CACEkE,KAAK,gBACLD,QACE,cAAC,EAAD,CACElE,MAAOA,EACPC,QAASA,gBC3HzBmE,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ab27d3df.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './PageContent.scss';\n\ntype PageContentProps = {\n  total: number,\n  perPage: number,\n};\n\nconst PageContent: React.FC<PageContentProps> = ({\n  total,\n  perPage,\n}) => {\n  const [\n    firstDisplayedItem,\n    setFirstDisplayedItem,\n  ] = useState(1);\n\n  const [\n    lastDisplayedItem,\n    setLastDisplayedItem,\n  ] = useState(perPage);\n\n  const { currentPage } = useParams();\n\n  useMemo(() => {\n    if (currentPage) {\n      const firstItem = (+currentPage.slice(5) - 1) * perPage + 1;\n\n      setFirstDisplayedItem(firstItem);\n\n      if (total < firstItem + perPage - 1) {\n        setLastDisplayedItem(total);\n      } else {\n        setLastDisplayedItem(firstItem + perPage - 1);\n      }\n    }\n  }, [currentPage]);\n\n  return (\n    <>\n      <p className=\"PageInformation\">\n        {`Item_${firstDisplayedItem} - Item_${lastDisplayedItem}`}\n      </p>\n    </>\n  );\n};\n\nexport default PageContent;\n","import React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Pagination.scss';\n\ntype Props = {\n  first: number,\n  last: number,\n  current: number,\n  perPage: number,\n  total: number,\n  withInfo: boolean,\n  selectPage: (selectedPage: number) => void,\n  moveBack: () => void,\n  moveForth: () => void,\n};\n\nconst Pagination: React.FC <Props> = ({\n  first,\n  last,\n  current,\n  perPage,\n  total,\n  withInfo,\n  selectPage,\n  moveBack,\n  moveForth,\n}) => {\n  const [precurrent, setPrecurrent] = useState(current - 1);\n  const [postcurrent, setPostcurrent] = useState(current + 1);\n  const [isFirstVisible, setIsFirstVisible] = useState(false);\n  const [isLastVisible, setIsLastVisible] = useState(last > 2);\n  const [isPrecurrentVisible, setIsPrecurrentVisible] = useState(false);\n  const [isPostcurrentVisible, setIsPostcurrentVisible] = useState(last > 1);\n  const [\n    isPrecurrentFreeSpaceVisible,\n    setIsPrecurrentFreeSpaceVisible,\n  ] = useState(false);\n  const [\n    isPostcurrentFreeSpaceVisible,\n    setIsPostcurrentFreeSpaceVisible,\n  ] = useState(last > 3);\n\n  const setCurrentNeighboursValues = () => {\n    setPrecurrent(current - 1);\n    setPostcurrent(current + 1);\n  };\n\n  const setVisibleFirstAndCurrentNeighboursValues = () => {\n    setCurrentNeighboursValues();\n    setIsFirstVisible(true);\n  };\n\n  const setParametersForRegularValue = () => {\n    setVisibleFirstAndCurrentNeighboursValues();\n    setIsLastVisible(true);\n    setIsPrecurrentVisible(true);\n    setIsPrecurrentFreeSpaceVisible(true);\n    setIsPostcurrentVisible(true);\n    setIsPostcurrentFreeSpaceVisible(true);\n  };\n\n  const setParemetersForValueOne = () => {\n    setCurrentNeighboursValues();\n    setIsFirstVisible(false);\n    setIsLastVisible(last > 2);\n    setIsPrecurrentVisible(false);\n    setIsPrecurrentFreeSpaceVisible(false);\n    setIsPostcurrentVisible(last > 1);\n    setIsPostcurrentFreeSpaceVisible(last > 3);\n  };\n\n  const setParametersForValueTwo = () => {\n    setVisibleFirstAndCurrentNeighboursValues();\n    setIsLastVisible(last > 3);\n    setIsPrecurrentVisible(false);\n    setIsPrecurrentFreeSpaceVisible(false);\n    setIsPostcurrentVisible(last > 2);\n    setIsPostcurrentFreeSpaceVisible(last > 4);\n  };\n\n  const setParametersForValueThree = () => {\n    setVisibleFirstAndCurrentNeighboursValues();\n    setIsLastVisible(last > 4);\n    setIsPrecurrentVisible(true);\n    setIsPrecurrentFreeSpaceVisible(false);\n    setIsPostcurrentVisible(last > 3);\n    setIsPostcurrentFreeSpaceVisible(last > 5);\n  };\n\n  const setParametersForLastValue = () => {\n    setVisibleFirstAndCurrentNeighboursValues();\n    setIsLastVisible(false);\n    setIsPrecurrentVisible(true);\n    setIsPrecurrentFreeSpaceVisible(true);\n    setIsPostcurrentVisible(false);\n    setIsPostcurrentFreeSpaceVisible(false);\n  };\n\n  const setParametersForSecondValueFromEnd = () => {\n    setVisibleFirstAndCurrentNeighboursValues();\n    setIsLastVisible(false);\n    setIsPrecurrentVisible(true);\n    setIsPrecurrentFreeSpaceVisible(last > 4);\n    setIsPostcurrentVisible(true);\n    setIsPostcurrentFreeSpaceVisible(false);\n  };\n\n  const setParametersForThirdValueFromEnd = () => {\n    setVisibleFirstAndCurrentNeighboursValues();\n    setIsLastVisible(true);\n    setIsPrecurrentVisible(true);\n    setIsPrecurrentFreeSpaceVisible(true);\n    setIsPostcurrentVisible(true);\n    setIsPostcurrentFreeSpaceVisible(false);\n  };\n\n  const setNewParameters = () => {\n    switch (current) {\n      case first:\n        setParemetersForValueOne();\n        break;\n      case first + 1:\n        setParametersForValueTwo();\n        break;\n      case first + 2:\n        setParametersForValueThree();\n        break;\n      case last:\n        setParametersForLastValue();\n        break;\n      case last - 1:\n        setParametersForSecondValueFromEnd();\n        break;\n      case last - 2:\n        setParametersForThirdValueFromEnd();\n        break;\n      default:\n        setParametersForRegularValue();\n    }\n  };\n\n  useEffect(() => {\n    setNewParameters();\n  }, [current, last]);\n\n  return (\n    <nav className=\"PagesContainer\">\n      <NavLink\n        className=\"PageLink VersionTwoButton Back\"\n        to={`/page=${current - 1}`}\n        onClick={moveBack}\n        style={{\n          pointerEvents: (current === first)\n            ? 'none' : 'auto',\n        }}\n      >\n        &lt;\n      </NavLink>\n\n      <span\n        className=\"AdditionalInfo\"\n        hidden={!withInfo}\n      >\n        {`\n          ${(current - 1) * perPage + 1} - ${(current * perPage) < total ? (current * perPage) : total} of ${total}\n        `}\n      </span>\n\n      <ul\n        className=\"PagesPanel\"\n      >\n        <li\n          className=\"ItemPage\"\n          hidden={!isFirstVisible}\n        >\n          <NavLink\n            className=\"PageLink\"\n            to={`/page=${first}`}\n            onClick={() => {\n              selectPage(first);\n            }}\n          >\n            {first}\n          </NavLink>\n        </li>\n        <li\n          className=\"FreeSpace\"\n          hidden={!isPrecurrentFreeSpaceVisible}\n        >\n          ...\n        </li>\n        <li\n          className=\"ItemPage\"\n          hidden={!isPrecurrentVisible}\n        >\n          <NavLink\n            className=\"PageLink\"\n            to={`/page=${precurrent}`}\n            onClick={() => {\n              selectPage(precurrent);\n            }}\n          >\n            {precurrent}\n          </NavLink>\n        </li>\n        <li\n          className=\"ItemPage\"\n        >\n          <NavLink\n            className=\"PageLink\"\n            to={`/page=${current}`}\n            onClick={() => {\n              selectPage(current);\n            }}\n          >\n            {`[${current}]`}\n          </NavLink>\n        </li>\n        <li\n          className=\"ItemPage\"\n          hidden={!isPostcurrentVisible}\n        >\n          <NavLink\n            className=\"PageLink\"\n            to={`/page=${postcurrent}`}\n            onClick={() => {\n              selectPage(postcurrent);\n            }}\n          >\n            {postcurrent}\n          </NavLink>\n        </li>\n        <li\n          className=\"FreeSpace\"\n          hidden={!isPostcurrentFreeSpaceVisible}\n        >\n          ...\n        </li>\n        <li\n          className=\"ItemPage\"\n          hidden={!isLastVisible}\n        >\n          <NavLink\n            className=\"PageLink\"\n            to={`/page=${last}`}\n            onClick={() => {\n              selectPage(last);\n            }}\n          >\n            {last}\n          </NavLink>\n        </li>\n      </ul>\n      <NavLink\n        className=\"PageLink VersionTwoButton Forth\"\n        to={`/page=${current + 1}`}\n        onClick={moveForth}\n        style={{\n          pointerEvents: (current === last)\n            ? 'none' : 'auto',\n        }}\n      >\n        &gt;\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React, { useState } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport './App.scss';\nimport PageContent from './components/PageContent/PageContent';\nimport Pagination from './components/Pagination/Pagination';\n\nconst App: React.FC = () => {\n  const [total] = useState(42);\n  const [page] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [withInfo, setWithInfo] = useState(false);\n  const navigate = useNavigate();\n\n  const onPageChange = (selectedPage: number) => {\n    setCurrentPage(selectedPage);\n  };\n\n  const handleBackButtonClick = () => {\n    const prevPage = currentPage;\n\n    if (prevPage > page) {\n      setCurrentPage(state => state - 1);\n    }\n  };\n\n  const handleForthButtonClick = () => {\n    const prevPage = currentPage;\n\n    if (prevPage < total) {\n      setCurrentPage(state => state + 1);\n    }\n  };\n\n  const onPerPageChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(page);\n    navigate('/page=1');\n  };\n\n  return (\n    <>\n      <h1>\n        Pagination\n      </h1>\n\n      <form className=\"SelectOptions\">\n        <select\n          className=\"ChangePerPage\"\n          defaultValue={5}\n          onChange={onPerPageChange}\n        >\n          <option\n            value=\"3\"\n          >\n            Items to display 3\n          </option>\n          <option\n            value=\"5\"\n          >\n            Items to display 5\n          </option>\n          <option\n            value=\"10\"\n          >\n            Items to display 10\n          </option>\n          <option\n            value=\"20\"\n          >\n            Items to display 20\n          </option>\n        </select>\n\n        <p> Show additional info </p>\n\n        <label>\n          Yes\n          <input\n            name=\"withInfo\"\n            type=\"radio\"\n            value=\"yes\"\n            onChange={() => setWithInfo(true)}\n          />\n        </label>\n        <label>\n          No\n          <input\n            name=\"withInfo\"\n            type=\"radio\"\n            value=\"no\"\n            onChange={() => setWithInfo(false)}\n            checked={!withInfo}\n          />\n        </label>\n      </form>\n\n      <div\n        className=\"VersionTwo\"\n      >\n        <Pagination\n          first={page}\n          last={Math.ceil(total / perPage)}\n          current={currentPage}\n          perPage={perPage}\n          total={total}\n          withInfo={withInfo}\n          selectPage={onPageChange}\n          moveBack={handleBackButtonClick}\n          moveForth={handleForthButtonClick}\n        />\n\n        <Routes>\n          <Route\n            index\n            element={(\n              <PageContent\n                total={total}\n                perPage={perPage}\n              />\n            )}\n          />\n          <Route\n            path=\"/:currentPage\"\n            element={(\n              <PageContent\n                total={total}\n                perPage={perPage}\n              />\n            )}\n          />\n        </Routes>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}